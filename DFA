class DFABooking:
    def __init__(self):
        self.state = 'START'
        self.movies = {
            "1": {"title": "Avengers: Endgame", "price": 50000, "studio": "Studio 1"},
            "2": {"title": "Joker", "price": 45000, "studio": "Studio 2"},
            "3": {"title": "Interstellar", "price": 55000, "studio": "Studio 3"}
        }
        self.showtimes = {"1": "12:00", "2": "15:00", "3": "18:00"}
        self.seats = {
            movie_id: {self.showtimes[time]: {f"{row}{col}": False for row in "ABCD" for col in range(1, 6)} for time in self.showtimes}
            for movie_id in self.movies
        }
        self.selected_movie = None
        self.selected_movie_id = None
        self.selected_time = None
        self.ticket_count = 0
        self.total_price = 0
        self.selected_seats = []

    def reset(self):
        """Reset state ke awal setelah pemesanan selesai, tanpa menghapus kursi yang sudah dipesan."""
        self.state = 'START'
        self.selected_movie = None
        self.selected_movie_id = None
        self.selected_time = None
        self.ticket_count = 0
        self.total_price = 0
        self.selected_seats = []

    def transition(self, input_value):
        if self.state == 'START':
            if input_value in self.movies:
                self.selected_movie = self.movies[input_value]
                self.selected_movie_id = input_value
                self.state = 'MOVIE_SELECTED'
                return f"üé¨ Film: {self.selected_movie['title']} | üí∞ Harga: {self.selected_movie['price']} | üè¢ {self.selected_movie['studio']}\nPilih jam tayang:\n" + self.display_showtimes()
            return "‚ùå Pilihan film tidak valid."

        elif self.state == 'MOVIE_SELECTED':
            if input_value in self.showtimes:
                self.selected_time = self.showtimes[input_value]
                self.state = 'TIME_SELECTED'
                return f"‚è∞ Jam tayang {self.selected_time} dipilih.\nMasukkan jumlah tiket:"
            return "‚ùå Jam tayang tidak valid! Pilih 1, 2, atau 3."

        elif self.state == 'TIME_SELECTED':
            if input_value.isdigit():
                num_tickets = int(input_value)
                available_seats = sum(not v for v in self.seats[self.selected_movie_id][self.selected_time].values())
                if 0 < num_tickets <= available_seats:
                    self.ticket_count = num_tickets
                    self.total_price = self.ticket_count * self.selected_movie['price']
                    self.state = 'CHOOSING_SEATS'
                    return f"Silakan pilih {self.ticket_count} kursi:\n{self.display_seats(self.selected_movie_id, self.selected_time)}"
                else:
                    return f"‚ùå Hanya {available_seats} kursi tersedia! Pilih jumlah yang sesuai."
            return "‚ùå Harus memasukkan angka!"

        elif self.state == 'CHOOSING_SEATS':
            chosen_seats = input_value.split()
            if len(chosen_seats) != self.ticket_count:
                return f"‚ùå Harus memilih {self.ticket_count} kursi! Pilih ulang:\n{self.display_seats(self.selected_movie_id, self.selected_time)}"

            invalid_seats = [seat for seat in chosen_seats if seat not in self.seats[self.selected_movie_id][self.selected_time] or self.seats[self.selected_movie_id][self.selected_time][seat]]

            if invalid_seats:
                return f"‚ùå Kursi {', '.join(invalid_seats)} tidak valid atau sudah dipesan! Pilih ulang:\n{self.display_seats(self.selected_movie_id, self.selected_time)}"

            for seat in chosen_seats:
                self.seats[self.selected_movie_id][self.selected_time][seat] = True

            self.selected_seats.extend(chosen_seats)
            self.state = 'TICKET_PRINTED'
            return self.print_ticket()

    def display_showtimes(self):
        """Menampilkan jam tayang yang tersedia dengan angka pilihan."""
        return "\n".join([f"{num}. {time}" for num, time in self.showtimes.items()])

    def display_seats(self, movie_id, time):
        """Menampilkan kursi yang tersedia dan yang sudah dipesan untuk jam tayang tertentu."""
        return "\n".join([" ".join([f"{seat}{'(X)' if self.seats[movie_id][time][seat] else ''}" for seat in [f"{row}{col}" for col in range(1, 6)]]) for row in "ABCD"])

    def print_ticket(self):
        """Cetak tiket dan kembali ke menu awal."""
        result = f"""
üìΩÔ∏è *Tiket Anda*
üé¨ Film: {self.selected_movie['title']}
üè¢ Studio: {self.selected_movie['studio']}
‚è∞ Jam tayang: {self.selected_time}
üéüÔ∏è Kursi: {', '.join(self.selected_seats)}
üí∞ Total Harga: {self.total_price}
‚úÖ Tiket berhasil dicetak!
"""
        self.reset()
        return result + self.display_main_menu()

    def display_main_menu(self):
        """Menampilkan menu utama."""
        return "Pilih film:\n1. Avengers: Endgame\n2. Joker\n3. Interstellar"

# *Simulasi DFA*
dfa = DFABooking()
print(dfa.display_main_menu())
while True:
    user_input = input("Masukkan pilihan: ")
    print(dfa.transition(user_input))
